<div class="form-group" style="width: 100%;">
    <label for="exampleInputEmail1">Remetente de reposta automatica</label>
    <select class="form-control" id="sessionSelect">
    <option value="">Select Instance</option>
    @foreach ($instances as $instance)
        <option value="{{ $instance->session_name }}">{{ $instance->session_name }}</option>
    @endforeach
    </select>
    <input type="hidden" name="session" id="selectedSession" value="">
</div>
<div class="pop-form-cont mb-3">
    <div class="form-content">
    <div class="form-group" style="width: 100%;">
        <label for="exampleInputEmail1">Palavara chave da Reposta Automatica.<span style="color:#007bff;">(Helio, ol√°, Halio)</span></label>
        <input type="text" name="keyword" class="form-control" id="exampleInputEmail1" placeholder="Palavara">
    </div>
    <div class="form-group">
        <label>Reposta automatica <span style="color:#007bff;">[name] ra exibir o nome do usu√°rio</span></label>
        <textarea class="form-control" id="responseTextArea" name="response" rows="3" placeholder="Enter ..."></textarea>
    </div>
    
    <div class="row">
        <div class="col-md-12">
        <div class=" card-default">
            <label>Arquivo de m√≠dia de resposta autom√°tica** <span style="color:#007bff;">(opcional) JPEG/PNG/PDF/DOCX/PPX/XLSX/CSV/MP3</span>
            </label>
            <div class="">
            <div id="actions" class="row">
                <div class="col-lg-6">
                    <div class="btn-group w-100">
                        <label for="response_file" class="w-100">
                            <span class="btn btn-success col fileinput-button">
                                <i class="fas fa-plus"></i>
                                <span>Add files</span>
                            </span>
                        </label>
                        <input type="file" id="response_file" name="upload_file" style="display: none;" accept="jpg, jpeg, png, pdf, docx, ppx, xlsx, csv, mp3">
                    </div>
                </div>
                <div class="col-lg-6">
                    <style>
                        .responders.preview-container {
                            position: relative;
                            background-color: #f7f7f7; /* Background color */
                        }
                        .responders.preview-container .content{
                            width: 300px; /* Set your desired width */
                            min-height: 38px; /* Set your desired height */
                            max-height: 200px; /* Set your desired height */
                            overflow: auto;
                            padding: 10px; /* Optional padding for content spacing */
                        }
                        .responders.preview-container .cross {
                            position: absolute;
                            background: #ffffff52;
                            width: 100%;
                            padding: 10px 16px 3px 0px;
                            z-index: 2;
                        }
                    </style>
                    <div class="responders preview-container">
                        <div id="cross" class="cross justify-content-end" style="display: none">
                            <i class="fa fa-times" id="clearInput" style="cursor: pointer"></i>
                        </div>
                        <div class="content w-100"></div>
                    </div>
                </div>
            </div>
        </div>
        <!-- /.card-body -->
    
        </div>
        <!-- /.card -->
        </div>
    </div>
    </div>
    <div class="form-content">
        <div class="form-group" style="width: 100%;">
          <label for="matchingPercentage">Porcentagem de correspondecia de reposta autom√°tica**</label>
          <input type="number" name="percentage" class="form-control" id="matchingPercentage" placeholder="Palavara" pattern="[0-9]+" oninput="validateInput(this)">
        </div>
        <label for="exampleInputEmail1">Emoji (Copie e cole)</label>
        <div class="emoji-cont">
            <div id="emoji-list"></div>
        </div>
        <script>
            document.addEventListener("DOMContentLoaded", function() {
            const emojiListContainer = document.getElementById("emoji-list")
            const responseTextArea = document.getElementById("responseTextArea");
        
            // Get emojis from Unicode
            const emojis = ["üòÄ", "üòÅ", "üòÇ", "ü§£", "üòÉ", "üòÑ", "üòÖ", "üòÜ", "üòâ", "üòä",
                "üòã", "üòé", "üòç", "üòò", "ü•∞", "üòó", "üòô", "üòö", "‚ò∫", "üôÇ",
                "ü§ó", "ü§©", "ü§î", "ü§®", "üòê", "üòë", "üò∂", "üôÑ", "üòè", "üò£",
                "üò•", "üòÆ", "ü§ê", "üòØ", "üò™", "üò´", "üò¥", "üòå", "üòõ", "üòú",
                "üòù", "ü§§", "üòí", "üòì", "üòî", "üòï", "üôÉ", "ü§ë", "üò≤", "‚òπ",
                "üôÅ", "üòñ", "üòû", "üòü", "üò§", "üò¢", "üò≠", "üò¶", "üòß", "üò®",
                "üò©", "ü§Ø", "üò¨", "üò∞", "üò±", "ü•µ", "ü•∂", "üò≥", "ü§™", "üòµ",
                "üò°", "üò†", "ü§¨", "üò∑", "ü§í", "ü§ï", "ü§¢", "ü§Æ", "ü§ß", "üòá",
                "ü•≥", "ü•¥", "ü•∫", "ü§†", "ü§°", "ü§•", "ü§´", "ü§≠", "üßê", "ü§ì",
                "üòà", "üëø", "üëπ", "üë∫", "üíÄ", "üëª", "üëΩ", "ü§ñ", "üí©", "üò∫",
                "üò∏", "üòπ", "üòª", "üòº", "üòΩ", "üôÄ", "üòø", "üòæ", "üëç", "üëé", "üëå", "‚úå", "ü§û", "ü§ü", "ü§ò", "üëè", "üôå", "üëê",
                    "ü§≤", "ü§ù", "üôè", "‚úç", "üíÖ", "ü§≥", "üí™", "ü¶æ", "ü¶µ", "ü¶ø",
                    "ü¶∂", "üë£", "üëÇ", "ü¶ª", "üëÉ", "üß†", "ü´Ä", "ü´Å", "ü¶∑", "ü¶¥",
                    "üëÄ", "üëÅ", "üëÖ", "üëÑ", "üíã", "ü©∏", "üë∂", "üëß", "üßí", "üë¶",
                    "üë©", "üßë", "üë®", "üë©‚Äçü¶±", "üßë‚Äçü¶±", "üë®‚Äçü¶±", "üë©‚Äçü¶∞", "üßë‚Äçü¶∞", "üë®‚Äçü¶∞",
                    "üë±‚Äç‚ôÄ", "üë±‚Äç‚ôÇ", "üë©‚Äçü¶≥", "üßë‚Äçü¶≥", "üë®‚Äçü¶≥", "üë©‚Äçü¶≤", "üßë‚Äçü¶≤", "üë®‚Äçü¶≤",
                    "üßî", "üëµ", "üßì", "üë¥", "üë≤", "üë≥‚Äç‚ôÄ", "üë≥‚Äç‚ôÇ", "üßï", "üßî‚Äç‚ôÄ",
                    "üßî‚Äç‚ôÇ", "üë±‚Äç‚ôÄ", "üë±‚Äç‚ôÇ", "üëÆ‚Äç‚ôÄ", "üëÆ‚Äç‚ôÇ", "üë∑‚Äç‚ôÄ", "üë∑‚Äç‚ôÇ", "üíÇ‚Äç‚ôÄ",
                    "üíÇ‚Äç‚ôÇ", "üïµ‚Äç‚ôÄ", "üïµ‚Äç‚ôÇ", "üë©‚Äç‚öï", "üë®‚Äç‚öï", "üë©‚Äçüåæ", "üë®‚Äçüåæ", "üë©‚Äçüç≥",
                    "üë®‚Äçüç≥", "üë©‚Äçüéì", "üë®‚Äçüéì", "üë©‚Äçüé§", "üë®‚Äçüé§", "üë©‚Äçüè´", "üë®‚Äçüè´", "üë©‚Äçüè≠",
                    "üë®‚Äçüè≠", "üë©‚Äçüíª", "üë®‚Äçüíª", "üë©‚Äçüíº", "üë®‚Äçüíº", "üë©‚Äçüîß", "üë®‚Äçüîß", "üë©‚Äçüî¨",
                    "üë®‚Äçüî¨", "üë©‚Äçüé®", "üë®‚Äçüé®", "üë©‚Äçüöí", "üë®‚Äçüöí", "üë©‚Äç‚úà", "üë®‚Äç‚úà", "üë©‚ÄçüöÄ",
                    "üë®‚ÄçüöÄ", "üë©‚Äç‚öñ", "üë®‚Äç‚öñ", "üë∞", "ü§µ", "üë∏", "ü§¥", "ü¶∏‚Äç‚ôÄ",
                    "ü¶∏‚Äç‚ôÇ", "ü¶π‚Äç‚ôÄ", "ü¶π‚Äç‚ôÇ", "ü§∂", "üéÖ", "üßô‚Äç‚ôÄ", "üßô‚Äç‚ôÇ", "üßù‚Äç‚ôÄ",
                    "üßù‚Äç‚ôÇ", "üßõ‚Äç‚ôÄ", "üßõ‚Äç‚ôÇ", "üßü‚Äç‚ôÄ", "üßü‚Äç‚ôÇ", "üßû‚Äç‚ôÄ", "üßû‚Äç‚ôÇ", "üßú‚Äç‚ôÄ",
                    "üßú‚Äç‚ôÇ", "üßö‚Äç‚ôÄ", "üßö‚Äç‚ôÇ", "üëº", "ü§∞", "ü§±", "üë©‚Äçüçº", "üë®‚Äçüçº",
                    "üôá‚Äç‚ôÄ", "üôá‚Äç‚ôÇ", "üíÅ‚Äç‚ôÄ", "üíÅ‚Äç‚ôÇ", "üôÖ‚Äç‚ôÄ", "üôÖ‚Äç‚ôÇ", "üôÜ‚Äç‚ôÄ", "üôÜ‚Äç‚ôÇ",
                    "üôã‚Äç‚ôÄ", "üôã‚Äç‚ôÇ", "ü§¶‚Äç‚ôÄ", "ü§¶‚Äç‚ôÇ", "ü§∑‚Äç‚ôÄ", "ü§∑‚Äç‚ôÇ", "üôé‚Äç‚ôÄ", "üôé‚Äç‚ôÇ",
                    "üôç‚Äç‚ôÄ", "üôç‚Äç‚ôÇ", "üíá‚Äç‚ôÄ", "üíá‚Äç‚ôÇ", "üíÜ‚Äç‚ôÄ", "üíÜ‚Äç‚ôÇ", "üßñ‚Äç‚ôÄ", "üßñ‚Äç‚ôÇ",
                    "üíÖ", "ü§≥", "üíÉ", "üï∫", "üëØ‚Äç‚ôÄ", "üëØ‚Äç‚ôÇ", "üï¥", "üö∂‚Äç‚ôÄ", "üö∂‚Äç‚ôÇ",
                    "üèÉ‚Äç‚ôÄ", "üèÉ‚Äç‚ôÇ", "üßç‚Äç‚ôÄ", "üßç‚Äç‚ôÇ", "üßé‚Äç‚ôÄ", "üßé‚Äç‚ôÇ", "üßë‚Äçü¶Ø", "üë©‚Äçü¶Ø",
                    "üë®‚Äçü¶Ø", "üßë‚Äçü¶º", "üë©‚Äçü¶º", "üë®‚Äçü¶º", "üßë‚Äçü¶Ω", "üë©‚Äçü¶Ω"]
        
        
            emojis.forEach(emoji => {
                const emojiSpan = document.createElement("span");
                emojiSpan.className = "emoji";
                emojiSpan.style.cursor = "pointer";
                emojiSpan.innerHTML = emoji;
                emojiSpan.addEventListener("click", function() {
                responseTextArea.value += emoji;  
                });
                emojiListContainer.appendChild(emojiSpan);
            });
            });
        </script>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Add a change event listener to the session select element
        const sessionSelect = document.getElementById("sessionSelect");
        const selectedSessionInput = document.getElementById("selectedSession");

        sessionSelect.addEventListener("change", function () {
            // Update the hidden input field with the selected session value
            selectedSessionInput.value = sessionSelect.value;
        });
    });
    function validateInput(input) {
        // Remove non-digit characters, but only if the input is not a valid number
        if (!/^\d+$/.test(input.value)) {
            input.value = input.value.replace(/\D/g, '');
        }

        // Parse the value to an integer
        const value = parseInt(input.value, 10);

        // Ensure the value is within the desired range
        if (isNaN(value) || value < 1) {
            input.value = '';
        } else if (value > 100) {
            input.value = '100';
        }
    }
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const responseFileInput = document.getElementById("response_file");
        const previewContainer = document.querySelector(".preview-container .content");
        const clearInput = document.getElementById("clearInput");
        const discardContent = document.getElementById("cross");

        responseFileInput.addEventListener("change", function () {
            // Clear the previous preview
            previewContainer.innerHTML = '';

            const file = this.files[0];
            if (file) {
                discardContent.style.display = "flex";
                const extension = file.name.split('.').pop().toLowerCase();
                const validImageExtensions = ['jpg', 'jpeg', 'png'];
                const validDocumentExtensions = ['pdf', 'docx', 'pptx', 'xlsx', 'csv'];
                const validAudioExtensions = ['mp3'];

                if (validImageExtensions.includes(extension)) {
                    // Display image
                    const img = document.createElement('img');
                    img.src = URL.createObjectURL(file);
                    img.classList.add('img-preview');
                    img.style.width = '100%';
                    previewContainer.appendChild(img);
                } else if (validDocumentExtensions.includes(extension)) {
                    // Display document with icon
                    const docIcon = document.createElement('i');
                    docIcon.className = 'far fa-file-alt mr-2';
                    const docName = document.createTextNode(file.name);
                    const docContainer = document.createElement('div');
                    docContainer.appendChild(docIcon);
                    docContainer.appendChild(docName);
                    previewContainer.appendChild(docContainer);
                } else if (validAudioExtensions.includes(extension)) {
                    // Display audio player
                    const audio = document.createElement('audio');
                    audio.controls = true;
                    const source = document.createElement('source');
                    source.src = URL.createObjectURL(file);
                    audio.appendChild(source);
                    previewContainer.appendChild(audio);
                } else {
                    // Unsupported file type
                    const unsupportedMsg = document.createTextNode('Unsupported file type');
                    previewContainer.appendChild(unsupportedMsg);
                }
            }
        });

        clearInput.addEventListener("click", function () {
            responseFileInput.value = ""; // Clear the input
            previewContainer.innerHTML = ""; // Hide the preview container
            discardContent.style.display = "none";
        });
    });
</script>